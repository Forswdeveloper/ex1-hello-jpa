JPA의 값 타입 컬렉션

- 값 타입을 하나 이상 저장할 때 사용
- @ElementCollection, @CollectionTable 사용
- 데이터베이스는 컬렉션을 같은 테이블에 저장할 수 있다.
- 컬렉션을 저장하기 위한 별도의 테이블이 필요함.

값 타입 컬렉션 사용
- 값 타입 저장 예제

Member member = new Member();
member.setUsername("member1");
member.setHomeAddress(new Address("NewCity","NewSteet","100000"));

member.getFavoriteFoods().add("삼겹살");
member.getFavoriteFoods().add("오리불고기");
member.getFavoriteFoods().add("김밥");

member.getAddressHistory().add(new Address("oldcity1","oldstreet1","100001"));
member.getAddressHistory().add(new Address("oldcity2","oldstreet2","100002"));
em.persist(member); //영속성 컨텍스트에 할당되면 컬렉도 라이프 사이클에 같이 포함됨. -> 값 타입이기 때문

- 값 타입 조회 예제
    - 값 타입 컬렉션도 지연 로딩 전략 사용
            // 조회
            Member findMember = em.find(Member.class, member.getId());

            //기본적으로 지연로딩이라서 호출해야 조회해옴.
            List<Address> addressHistory = findMember.getAddressHistory();
            for (Address address : addressHistory) {
                System.out.println("address = " + address.getCity());
            }
            Set<String> favoriteFoods = findMember.getFavoriteFoods();
            for (String favoriteFood : favoriteFoods) {
                System.out.println("favoriteFood = " + favoriteFood);
            }

- 값 타입 수정 예제

//수정   set 사용 안됨 불변 유지
Address homeAddress = findMember.getHomeAddress();
findMember.setHomeAddress(new Address("New City2",homeAddress.getStreet(),homeAddress.getZipcode()));

findMember.getFavoriteFoods().remove("김밥"); //String은 불변객체 따라서 변경할 수 없고 삭제 후 다시 새로 넣어줘야함
findMember.getFavoriteFoods().add("만두");

//모든 값 삭제 후 Insert 실행.
findMember.getAddressHistory().remove(new Address("oldcity1","oldstreet1","100001")); // equals 사용 시점.
findMember.getAddressHistory().add(new Address("NewCity3","Newstreet3","100001")); // equals 사용 시점.

- 참고 : 값 타입 컬렉션은 영속성 전에(Cascade) + 고아 객체 제거 기능을 필수로 가진다고 볼 수 있다.

값 타입 컬렉션 제약사항

- 값 타입은 엔티티와 다르게 식별자 개념이 없다.
- 값은 변경하면 추적이 어렵다.
- 값 타입 컬렉션에 변경 사항이 발생하면, 주인 엔티티와 연관된 모든 데이터를 삭제하고, 값 타입 컬렉션에 있는 현재 값을 모두 다시 저장한다.
- 값 타입 컬렉션을 매핑하는 테이블은 모든 컬럼을 묶어서 기본 키를 구성해야함 : NULL 입력 X, 중복 저장 X

값 추적이 안되서 사용하기 어려워보임.

값 타입 컬렉션 대안
- 실무에서는 상황에 따라 값 타입 컬렉션 대신에 일대다 관계를 고려
- 일대다 관계를 위한 엔티티를 만들고, 여기에서 값 타입을 사용
- 영속성 전이(Cascade) + 고아 객체(orphanRemoval = true) 제거를 사용해서 값 타입 컬렉션 처럼 사용.

EX) AddressEntity

체크 박스 선택 같은 단순한 값이 필요한 경우 사용하는 것을 추천.

정리
1. 엔티티 타입의 특징
 - 식별자 있음
 - 생명 주기 관리
 - 공유
2. 값 타입의 특징
 - 식별자 없음
 - 생명 주기를 엔티티에 의존
 - 공유하지 않는 것이 안전(복사해서 사용)
 - 불변 객체로 만드는 것이 안전

 값 타입은 정말 값 타입이라 판단될 때만 사용
 엔티티와 값 타입을 혼동해서 엔티티를 값 타입으로 만들면 안됨
 식별자가 필요하고, 지속해서 값을 추적, 변경해야 한다면 그것은 값 타입이 아닌 엔티티로 사용해야 함