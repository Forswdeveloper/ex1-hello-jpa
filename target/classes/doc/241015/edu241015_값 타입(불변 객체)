JPA의 값 타입과 불변 객체

값 타입은 복잡한 객체 세상을 조금이라도 단순화하려고 만든 것이기 단순하고 안전하게 다룰 수 있어야 함.

값 타입 공유 참조
 - 임베디드 타입 값은 값 타입을 여러 엔티티에서 공유하면 위험함
 - 부작용 발생
 - 값 타입의 실제 인스턴스인 값을 공유하는 것은 위험하기에, 대신 값(인스턴스)을 복사해서 사용
    - 항상 값을 복사해서 사용하면 공유 참조로 인해 발생하는 부작용을 피할 수 있다.
    - 문제는 임베디드 타입처럼 직접 정의한 값 타입은 자바의 기본 타입이 아니라 객체 타입이다.
    - 자바 기본 타입에 값을 대입하면 값을 복사하지만, 객체 타입은 참조 값을 직접 대이하는 것을 막을 방법이 없다.
    - 객체의 공유 참조는 피할 수 없다. 객체 타입의 한계(참조를 전달) 를 고려해야함.


불변 객체
 - 객체 타입을 수정할 수 없게 만들면 부작용을 원천 차단
 - 값 타입은 불변 객체(immutable object)로 설계해야함
 - 불변 객체 : 생성 시점 이후 절대 값을 변경할 수 없는 객체
 - 생성자로만 값을 설정하고 수정자(Setter)를 만들지 않으면 됨
 - 참고 : Integer, String은 자바가 제공하는 대표적인 불변 객체

 Address address = new Address("Seoul", "Gwankakku", "08832");
 Member member1 = new Member();
 member1.setUsername("Hello1");
 member1.setHomeAddress(address);
 em.persist(member1);

 //같은 임베디드 타입 참조 중일 때 값 변경 시도
 //Setter 생성하지 않음으로 불변하도록 설정.
 //member1.getHomeAddress().setCity("New Seoul"); // -> update 쿼리 두번 실행됨.  공유해서 쓰고 싶으면 Entity를 사용해서 써야함.
 //값을 변경하고 싶을 때는 새로 객체를 만들어야 함.
 Address newAddress = new Address("New Seoul", address.getStreet(), address.getZipcode());

 Member member2 = new Member();
 member2.setUsername("Hello2");
 member2.setHomeAddress(newAddress);
 em.persist(member2);